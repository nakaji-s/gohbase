// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/nakaji-s/gohbase/hrpc (interfaces: RegionClient)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	hrpc "github.com/nakaji-s/gohbase/hrpc"
)

// Mock of RegionClient interface
type MockRegionClient struct {
	ctrl     *gomock.Controller
	recorder *_MockRegionClientRecorder
}

// Recorder for MockRegionClient (not exported)
type _MockRegionClientRecorder struct {
	mock *MockRegionClient
}

func NewMockRegionClient(ctrl *gomock.Controller) *MockRegionClient {
	mock := &MockRegionClient{ctrl: ctrl}
	mock.recorder = &_MockRegionClientRecorder{mock}
	return mock
}

func (_m *MockRegionClient) EXPECT() *_MockRegionClientRecorder {
	return _m.recorder
}

func (_m *MockRegionClient) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockRegionClientRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockRegionClient) Host() string {
	ret := _m.ctrl.Call(_m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockRegionClientRecorder) Host() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Host")
}

func (_m *MockRegionClient) Port() uint16 {
	ret := _m.ctrl.Call(_m, "Port")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockRegionClientRecorder) Port() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Port")
}

func (_m *MockRegionClient) QueueRPC(_param0 hrpc.Call) {
	_m.ctrl.Call(_m, "QueueRPC", _param0)
}

func (_mr *_MockRegionClientRecorder) QueueRPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueueRPC", arg0)
}

func (_m *MockRegionClient) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockRegionClientRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}
